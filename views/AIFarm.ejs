<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FarmerAssist - Smart Farming Solutions</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="icon" href="https://images.unsplash.com/photo-1511735643442-503bb3bd348a?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" type="image/icon type">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.min.js"></script>

<link rel="stylesheet" href="style.css">
<style>
    .chat {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh; /* Vertically center */
  padding: 20px;
  margin-top: 50px;
}

.chat-container {
  width: 100%;
  max-width: 600px; /* Controls width on large screens */
}

</style>

<style>
    
</style>

</head>

<body data-bs-spy="scroll" data-bs-target=".navbar">

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark fixed-top">
    <div class="container">
        <a class="navbar-brand" href="#"><span>Edu</span>Feedback</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
                <li class="nav-item"><a class="nav-link" href="/about">About</a></li>
                <li class="nav-item"><a class="nav-link active" href="/contact">Contact</a></li>

                <div class="dropdown" style="position: relative; top: 4px">
                    <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton"
                        data-bs-toggle="dropdown" aria-expanded="false" style="background-color: transparent;">
                        Explore
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="background-color: rgb(69, 25, 135);">
                        <li class="nav-item"><a class="nav-link" href="/EduAI">EduAI</a></li>
                        <li class="nav-item"><a class="nav-link" href="/ansCheck">AnsCheck</a></li>
                        <li class="nav-item"><a class="nav-link" href="/quiz">QuizGenerate</a></li>
                    </ul>
                </div>
                <li class="nav-item"><a class="nav-link" href="/MockInterview">AI Teacher Convo</a></li>
                <li class="nav-item"><a class="nav-link btn btn-outline-light ms-2" href="/login">Teacher Login</a>
                </li>
                <li class="nav-item"><a class="nav-link btn btn-primary ms-2" href="/register">Register School</a>
                </li>
            </ul>
        </div>
    </div>
</nav>


    <div class="chat" >
        <div class="chat-container">
            <h2>ðŸ¤– EduAI</h2>

            <div id="chat-box" class="chat-box"></div>

            <div class="pdfSend">
                <div class="input-group">
                    <!-- <input type="file" id="pdf-upload" class="form-control" accept="application/pdf"> -->
                    <input type="text" id="user-input" class="form-control" placeholder="Type a message...">
                    <button class="btn btn-primary" style="height: 50px;" onclick="sendMessage()">Send</button>
                </div>
                <div class="pdf"><input type="file" id="pdf-upload" class="form-control" accept="application/pdf"></div>
                <button class="clear-chat-btn" onclick="clearChat()">Clear Chat</button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-lg-4 mb-4">
                    <h5>EduFeedback</h5>
                    <p>AI-powered teacher assistant that automates grading and provides personalized feedback to support educators and enhance student learning.</p>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-facebook-f"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>
                <div class="col-lg-2 col-md-6 mb-4">
                    <h5>Quick Links</h5>
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="/about">About</a></li>
                        <li><a href="/contact">Contact</a></li>
                        <li><a href="/grading">Auto Grading</a></li>
                    </ul>
                </div>
                <div class="col-lg-2 col-md-6 mb-4">
                    <h5>Features</h5>
                    <ul>
                        <li><a href="#">Assignment Grading</a></li>
                        <li><a href="#">Student Feedback</a></li>
                        <li><a href="#">Analytics Dashboard</a></li>
                        <li><a href="#">Rubric Builder</a></li>
                    </ul>
                </div>
                <div class="col-lg-4 mb-4">
                    <h5>Educator Newsletter</h5>
                    <p>Subscribe for teaching tips, product updates, and education research.</p>
                    <form class="mt-3">
                        <div class="input-group">
                            <input type="email" class="form-control" placeholder="Your Email">
                            <button class="btn btn-primary" type="submit">Subscribe</button>
                        </div>
                    </form>
                </div>
            </div>
            <div class="copyright text-center">
                <p>&copy; 2025 EduFeedback. All Rights Reserved. Supporting Quality Education Worldwide.</p>
            </div>
        </div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>


    <script>
        $(document).ready(function () {
            $('.carousel').carousel({
                interval: 3000
            });
        });


        $(document).ready(function () {
            // Navbar scroll effect
            $(window).scroll(function () {
                if ($(this).scrollTop() > 100) {
                    $('.navbar').addClass('scrolled');
                } else {
                    $('.navbar').removeClass('scrolled');
                }
            });

            // Smooth scrolling for anchor links
            $('a[href*="#"]').on('click', function (e) {
                e.preventDefault();

                $('html, body').animate(
                    {
                        scrollTop: $($(this).attr('href')).offset().top - 70,
                    },
                    500,
                    'linear'
                );
            });

            // Add active class to nav links on scroll
            $(window).scroll(function () {
                var scrollDistance = $(window).scrollTop() + 200;

                $('section').each(function (i) {
                    if ($(this).position().top <= scrollDistance) {
                        $('.nav-link.active').removeClass('active');
                        $('.nav-link').eq(i).addClass('active');
                    }
                });
            }).scroll();

            // Form submission
            $('.contact-form form').submit(function (e) {
                e.preventDefault();
                alert('Thank you for your message! We will get back to you soon.');
                $(this).trigger("reset");
            });

            // Newsletter form submission
            $('footer form').submit(function (e) {
                e.preventDefault();
                alert('Thank you for subscribing to our newsletter!');
                $(this).trigger("reset");
            });
        });

        $(document).ready(function () {
            $('.carousel').carousel({
                interval: 3000
            });
        });


        $(document).ready(function () {
            // Navbar scroll effect
            $(window).scroll(function () {
                if ($(this).scrollTop() > 100) {
                    $('.navbar').addClass('scrolled');
                } else {
                    $('.navbar').removeClass('scrolled');
                }
            });

            // Smooth scrolling for anchor links
            $('a[href*="#"]').on('click', function (e) {
                e.preventDefault();

                $('html, body').animate(
                    {
                        scrollTop: $($(this).attr('href')).offset().top - 70,
                    },
                    500,
                    'linear'
                );
            });

            // Add active class to nav links on scroll
            $(window).scroll(function () {
                var scrollDistance = $(window).scrollTop() + 200;

                $('section').each(function (i) {
                    if ($(this).position().top <= scrollDistance) {
                        $('.nav-link.active').removeClass('active');
                        $('.nav-link').eq(i).addClass('active');
                    }
                });
            }).scroll();

            // Form submission
            $('.contact-form form').submit(function (e) {
                e.preventDefault();
                alert('Thank you for your message! We will get back to you soon.');
                $(this).trigger("reset");
            });

            // Newsletter form submission
            $('footer form').submit(function (e) {
                e.preventDefault();
                alert('Thank you for subscribing to our newsletter!');
                $(this).trigger("reset");
            });
        });


        async function sendMessage() {
            let userInput = document.getElementById("user-input").value.trim();
            if (!userInput) return;

            let chatBox = document.getElementById("chat-box");

            // Append User Message
            let userMsg = document.createElement("div");
            userMsg.className = "chat-bubble user-message";
            userMsg.innerText = userInput;
            chatBox.appendChild(userMsg);
            document.getElementById("user-input").value = "";
            chatBox.scrollTop = chatBox.scrollHeight;

            // Fetch AI Response
            try {
                let response = await fetch("/chat", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message: userInput })
                });

                let data = await response.json();

                // Append Bot Response
                let botMsg = document.createElement("div");
                botMsg.className = "chat-bubble bot-message";
                botMsg.innerText = data.response;
                chatBox.appendChild(botMsg);
                chatBox.scrollTop = chatBox.scrollHeight;
            } catch (error) {
                console.error("Error:", error);
            }
        }

        // Listen for Enter key press
        document.getElementById("user-input").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault(); // Prevents new line in input field
                sendMessage();
            }
        });



        // Initialize jsPDF properly
        const { jsPDF } = window.jspdf;

        // Modified sendMessage function
        async function sendMessage() {
            let userInput = document.getElementById("user-input").value.trim();
            if (!userInput) return;

            let chatBox = document.getElementById("chat-box");

            // Append User Message
            let userMsg = document.createElement("div");
            userMsg.className = "chat-bubble user-message";
            userMsg.innerText = userInput;
            chatBox.appendChild(userMsg);
            document.getElementById("user-input").value = "";
            userMsg.scrollIntoView({ behavior: 'smooth' });

            // Typing Indicator
            let typingIndicator = document.createElement("div");
            typingIndicator.className = "typing";
            typingIndicator.innerHTML = "<span></span><span></span><span></span>";
            chatBox.appendChild(typingIndicator);
            typingIndicator.scrollIntoView({ behavior: 'smooth' });

            try {
                let response = await fetch("/chat", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message: userInput })
                });

                let data = await response.json();
                chatBox.removeChild(typingIndicator);

                // Create bot message container
                let botMsg = document.createElement("div");
                botMsg.className = "chat-bubble bot-message";

                // Add response text
                let textNode = document.createTextNode(data.response);
                botMsg.appendChild(textNode);

                // Create download button
                let downloadBtn = document.createElement("button");
                downloadBtn.className = "download-btn";
                downloadBtn.innerHTML = "ðŸ“¥";
                downloadBtn.onclick = () => generatePDF(data.response);

                botMsg.appendChild(downloadBtn);
                chatBox.appendChild(botMsg);
                botMsg.scrollIntoView({ behavior: 'smooth' });

            } catch (error) {
                console.error("Error:", error);
            }
        }

        // Modified PDF generation function
        function generatePDF(text) {
            const doc = new jsPDF();
            const lineHeight = 12;
            const margin = 20;
            let yPos = margin;

            // Split text into paragraphs
            const paragraphs = text.split('\n').filter(p => p.trim() !== '');

            // Custom text splitting with paragraph preservation
            paragraphs.forEach(paragraph => {
                const lines = doc.splitTextToSize(paragraph, doc.internal.pageSize.width - 2 * margin);

                lines.forEach((line, index) => {
                    if (yPos > doc.internal.pageSize.height - margin) {
                        doc.addPage();
                        yPos = margin;
                    }

                    doc.text(line, margin, yPos);
                    yPos += lineHeight;

                    // Add extra space after paragraph
                    if (index === lines.length - 1) yPos += lineHeight / 2;
                });
            });

            doc.save('Response.pdf');
        }


        // Enter key listener
        document.getElementById("user-input").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // Function to extract text from PDF
        async function extractTextFromPDF(file) {
            let fileReader = new FileReader();

            return new Promise((resolve, reject) => {
                fileReader.onload = async function () {
                    try {
                        let pdfData = new Uint8Array(fileReader.result);
                        let pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;
                        let text = "";

                        for (let i = 1; i <= pdf.numPages; i++) {
                            let page = await pdf.getPage(i);
                            let textContent = await page.getTextContent();
                            let pageText = textContent.items.map(item => item.str).join(" ");
                            text += pageText + "\n"; // Append extracted text with a newline
                        }
                        resolve(text.trim()); // Trim to remove unnecessary spaces
                    } catch (error) {
                        reject("Error processing PDF: " + error);
                    }
                };

                fileReader.onerror = () => reject("Error reading file");
                fileReader.readAsArrayBuffer(file);
            });
        }

        // PDF upload handler
        document.getElementById("pdf-upload").addEventListener("change", async function (event) {
            let file = event.target.files[0];
            if (file && file.type === "application/pdf") {
                try {
                    let extractedText = await extractTextFromPDF(file);
                    document.getElementById("user-input").value = extractedText;
                } catch (error) {
                    alert("Error processing PDF file");
                }
            } else {
                alert("Please upload a valid PDF file.");
            }
        });


        // Add clear chat function
        function clearChat() {
            const chatBox = document.getElementById("chat-box");
            chatBox.innerHTML = '';
        }

    </script>
</body>

</html>